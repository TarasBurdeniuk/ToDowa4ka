{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = createReducer;\n\nvar _util = require('./util');\n\nvar _clone = require('clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar assign = Object.assign;\n/**\n * @param {Object} handlers\n * @param {Object} defaultState\n */\n\nfunction createReducer(defaultState, handlers) {\n  if ((typeof defaultState === 'undefined' ? 'undefined' : _typeof(defaultState)) !== 'object') {\n    return (0, _util.throwError)('invalid defaultState');\n  }\n\n  if ((typeof handlers === 'undefined' ? 'undefined' : _typeof(handlers)) !== 'object') {\n    return (0, _util.throwError)('invalid handlers');\n  }\n\n  return function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n    var action = arguments[1];\n    var type = action.type; // TODO: check Immutable data type\n\n    if (!type) {\n      return assign({}, state);\n    }\n\n    var handler = handlers[type];\n\n    if (!(0, _util.isFunc)(handler)) {\n      return assign({}, state);\n    }\n\n    return (0, _clone2.default)(assign({}, state, executeHandler(handler, state, action)));\n  };\n}\n/**\n * private\n */\n\n\nfunction executeHandler(handler, state, action) {\n  var result = void 0;\n\n  if (action.hasOwnProperty('payload')) {\n    result = handler(action.payload, state, action);\n  } else {\n    // TODO: remove this, only standard `payload`\n    console.warn('non standard action support will be removed');\n    result = handler(pickAction(action), state, action);\n  }\n\n  return assign({}, state, result);\n}\n\nfunction pickAction(action) {\n  var ignoreKeys = ['type', 'payload', 'error', 'meta'];\n  var payload = {};\n  Object.keys(action).forEach(function (key) {\n    if (ignoreKeys.indexOf(key) === -1) {\n      payload[key] = action[key];\n    }\n  });\n  return payload;\n}","map":null,"metadata":{},"sourceType":"script"}