{"ast":null,"code":"import _objectSpread from \"/Users/tarasburdenuk/Desktop/DAN/test/react/todowa4ka/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_TODO } from '../action/addTodo';\nimport { DELETE_TODO } from '../action/deleteTodo';\nimport { CHANGE_DESCRIPTION } from '../action/changeDescription';\nimport { CHANGE_TITLE } from '../action/changeTitle';\nimport UUID from 'uuid'; // const initialState = [\n//     {\n//         title: 'first',\n//         description: 'first descr',\n//         id: '123',\n//         completed: false\n//     },\n//     {\n//         title: 'second',\n//         description: 'second descr',\n//         id: '456',\n//         completed: false\n//     }\n// ];\n\nconst initialState = {\n  title: '',\n  description: '',\n  todoList: [{\n    title: 'Определить состояние и сделать его наблюдаемым',\n    description: 'Стор представляет собой ES6 class с единственным свойством show. Мы повесили на него декоратор @observable, тем самым сказали mobx-у наблюдать за ним. Show — это состояние нашей панели, которое мы будем менять.',\n    id: '123',\n    completed: false\n  }, {\n    title: 'Создать представление, реагирующее на изменение состояния',\n    description: 'Хорошо, что у нас уже оно есть, это component/menu/index.js. Теперь, когда состояние будет изменяться, наше меню будет автоматически перересовываться, при этом mobx найдет кротчайший путь для обновления представления. Что бы это произошло, нужно обернуть функцию, описывающую react компонент, в observer. ',\n    id: '456',\n    completed: false\n  }]\n};\n\nconst todoItems = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_TITLE:\n      return _objectSpread({}, state, {\n        title: action.payload\n      });\n\n    case CHANGE_DESCRIPTION:\n      return _objectSpread({}, state, {\n        description: action.payload\n      });\n\n    case ADD_TODO:\n      return _objectSpread({}, state, {\n        todoList: [...state.todoList, {\n          title: state.title,\n          description: state.description,\n          id: UUID(),\n          completed: false\n        }],\n        title: '',\n        description: ''\n      });\n\n    case DELETE_TODO:\n      return _objectSpread({}, state);\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default todoItems;","map":{"version":3,"sources":["/Users/tarasburdenuk/Desktop/DAN/test/react/todowa4ka/src/reducers/todoItems.js"],"names":["ADD_TODO","DELETE_TODO","CHANGE_DESCRIPTION","CHANGE_TITLE","UUID","initialState","title","description","todoList","id","completed","todoItems","state","action","type","payload"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,mBAAvB;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,SAAQC,kBAAR,QAAiC,6BAAjC;AACA,SAAQC,YAAR,QAA2B,uBAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,WAAW,EAAE,EAFI;AAGjBC,EAAAA,QAAQ,EAAE,CACN;AACIF,IAAAA,KAAK,EAAE,gDADX;AAEIC,IAAAA,WAAW,EAAE,oNAFjB;AAGIE,IAAAA,EAAE,EAAE,KAHR;AAIIC,IAAAA,SAAS,EAAE;AAJf,GADM,EAON;AACIJ,IAAAA,KAAK,EAAE,2DADX;AAEIC,IAAAA,WAAW,EAAE,mTAFjB;AAGIE,IAAAA,EAAE,EAAE,KAHR;AAIIC,IAAAA,SAAS,EAAE;AAJf,GAPM;AAHO,CAArB;;AAmBA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,YAAL;AACI,+BAAWS,KAAX;AAAkBN,QAAAA,KAAK,EAAEO,MAAM,CAACE;AAAhC;;AACJ,SAAKb,kBAAL;AACI,+BAAWU,KAAX;AAAkBL,QAAAA,WAAW,EAAEM,MAAM,CAACE;AAAtC;;AACJ,SAAKf,QAAL;AACI,+BACOY,KADP;AACcJ,QAAAA,QAAQ,EAAE,CAAC,GAAGI,KAAK,CAACJ,QAAV,EAAoB;AACpCF,UAAAA,KAAK,EAAEM,KAAK,CAACN,KADuB;AAEpCC,UAAAA,WAAW,EAAEK,KAAK,CAACL,WAFiB;AAGpCE,UAAAA,EAAE,EAAEL,IAAI,EAH4B;AAIpCM,UAAAA,SAAS,EAAE;AAJyB,SAApB,CADxB;AAOIJ,QAAAA,KAAK,EAAE,EAPX;AAQIC,QAAAA,WAAW,EAAE;AARjB;;AAUJ,SAAKN,WAAL;AACI,+BAAWW,KAAX;;AACJ;AACI,+BAAWA,KAAX;AAnBR;AAqBH,CAtBD;;AAwBA,eAAeD,SAAf","sourcesContent":["import {ADD_TODO} from '../action/addTodo';\nimport {DELETE_TODO} from '../action/deleteTodo';\nimport {CHANGE_DESCRIPTION} from '../action/changeDescription';\nimport {CHANGE_TITLE} from '../action/changeTitle';\nimport UUID from 'uuid';\n\n// const initialState = [\n//     {\n//         title: 'first',\n//         description: 'first descr',\n//         id: '123',\n//         completed: false\n//     },\n//     {\n//         title: 'second',\n//         description: 'second descr',\n//         id: '456',\n//         completed: false\n//     }\n// ];\n\nconst initialState = {\n    title: '',\n    description: '',\n    todoList: [\n        {\n            title: 'Определить состояние и сделать его наблюдаемым',\n            description: 'Стор представляет собой ES6 class с единственным свойством show. Мы повесили на него декоратор @observable, тем самым сказали mobx-у наблюдать за ним. Show — это состояние нашей панели, которое мы будем менять.',\n            id: '123',\n            completed: false\n        },\n        {\n            title: 'Создать представление, реагирующее на изменение состояния',\n            description: 'Хорошо, что у нас уже оно есть, это component/menu/index.js. Теперь, когда состояние будет изменяться, наше меню будет автоматически перересовываться, при этом mobx найдет кротчайший путь для обновления представления. Что бы это произошло, нужно обернуть функцию, описывающую react компонент, в observer. ',\n            id: '456',\n            completed: false\n        }\n    ]\n};\n\nconst todoItems = (state = initialState, action) => {\n    switch (action.type) {\n        case CHANGE_TITLE:\n            return {...state, title: action.payload};\n        case CHANGE_DESCRIPTION:\n            return {...state, description: action.payload};\n        case ADD_TODO:\n            return {\n                ...state, todoList: [...state.todoList, {\n                    title: state.title,\n                    description: state.description,\n                    id: UUID(),\n                    completed: false\n                }],\n                title: '',\n                description: ''\n            };\n        case DELETE_TODO:\n            return {...state};\n        default:\n            return {...state};\n    }\n};\n\nexport default todoItems;"]},"metadata":{},"sourceType":"module"}